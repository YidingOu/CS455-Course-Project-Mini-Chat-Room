{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Yiding Ou\
\
Part3:\
\
Overall design. there are still two while loops on clients side, and two for server side. For the client side, until the user leave the chat room, this while loop can record all user\'92s input and store it in a variable. The other one served as receiving server\'92s protocols and print corresponding outputs.\
\
For the server side, there is two while loops, one is from skeleton code, which is open new user\'92s thread and if there are 5 users, return busy protocol, the other one is served as receiving user side protocols and user\'92s input and broadcast to his friends. \
\
Based on part 2, this part only broadcast to specific friends, and have some extra functionality like adding friend, accept/deny friend request and disconnect friend. Both of those functionality are satisfied by protocol, first, user input some specific commends, for instance, if he wants to add friends, he will type in a line starts with @connect. So in my client side, there is a while loop store all users\'92 input and detecting whether there is some commend emerge. If user type in some commend, the client side will send protocol, for instance #friendme, to the server side, and the server receive it and do corresponding works, for example if user1 wants to add user2, user1 type @connect user2, the client server detect this commend, and send the protocol with user2\'92s name to the server, server receive request and name, send a friend request by protocol to user2\'92s client side, and user2\'92s client side will print the request with user1\'92s name.\
\
i add a request list for this part. Since if user1 request user2 as a friend, but user2 ignore this message, and respond it after several hours, we still need to find this request, so with this list, if user1 request to add user2, the name of user1 will stored in user2\'92s request list, and after user2 accept or deny this request, user1\'92s name will removed from this list.\
\
Extension: I add the duplication name detect for this part, however, if user1 didn\'92t input his name, and user2 enter and input his name, the name of user1 is null, if I compare there names now, it will return null pointer exception, additionally, I add some other functionality: 1. User cannot add himself as a friend. 2. Users cannot add a unexist user. 3. User cannot accept or deny an unexisted request. 4. User cannot disconnect the friendship with a unfriend user.}