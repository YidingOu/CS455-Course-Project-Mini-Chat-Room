{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Yiding Ou\
\
Part2:\
\
For the overall design: there are two while loop in the client side, until the user leave the chat room, this while loop can record all user\'92s input and store it in a variable. The other one served as receiving server\'92s protocols and print corresponding outputs.\
\
For the server side, there is two while loops, one is from skeleton code, which is open new user\'92s thread and if there are 5 users, return busy protocol, the other one is that receive user side protocols and user\'92s input and broadcast it. when a user enter, the server will ask him to input his user name, so I believe the user\'92s first input is his username. And after I get his name, I use protocol #Welcome followed by his name and send it to the client side, when client side received this protocol, it prints out welcome message. At the same time, on the server side, the server will send a protocol to all other not empty threads, which is #newuser followed by his name. And client server received this protocol and print messages. when user input some specific commends like \'93Exit\'94, my client side will find it by startsWith function. And if the user wants to leave, I will send a protocol with \'93#Bye\'94 with output steam to the server side.and once the server detected this protocol it will break the while loop and shut down and clean this user\'92s thread. And send a #Bye protocol to client side, and client side will print out goodbye message.\
\
For this part, I can extent with some functionality of detecting duplicated user name, which I done in part three.}